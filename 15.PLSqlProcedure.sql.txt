--15.PLSqlProcedure.sql
/*
1. 저장 프로시저
	- 이름을 부여해서 필요한 시점에 재사용 가능한 plsql
	- DB에 사용자 정의 기능을 등록 -> 필요한 시점에 사용
 2. 문법
	2-1. 생성만
		- 이미 동일한 이름의 procedure가 존재할 경우 error 발생 
		create procedure  이름
		is
		begin
		end;
		/

	2-2. 생성 및 치환
    		- 미 존재할 경우 생성, 존재할 경우 치환
		create or replace procedure
		is
		begin
		end;
		/

3. 에러 발생시
show error
*/


--1. procedure 정보 확인 sql문장
desc user_source;
select * from user_source;


--2. 실습을 위한 test table
drop table dept01;
create table dept01 as select * from dept;
drop table emp01;
create table emp01 as select * from emp;


--3. emp01의 부서 번호가 20인 모든 사원의 job을 STUDENT로 변경하는 프로시저 생성
create or replace procedure update_job
is
begin
	update emp01 set job = 'STUDENT' where deptno = 20;
end;
/

select * from emp01;
select * from user_source;
-- 생성 후 db에 등록은 되어있으나 호출하지 않은 상태
execute update_job;
-- procedure 실행하는 명령어

select * from emp01;
rollback;
select * from emp01;

롤백 가능 


--5. 가변적인 사번(동적)으로 실행시마다 해당 사원의 급여에 +500 하는 프로시저 생성하기
select empno, sal from emp01 where empno = 7369;
create or replace procedure sal_update(v_empno emp01.empno%type)
is
begin
	update emp01 set sal = sal+500 where empno = v_empno;
end;
/
execute sal_update(7369);
select empno, sal from emp01 where empno = 7369;
execute sal_update(7369);
select empno, sal from emp01 where empno = 7369;
execute sal_update(7369);
select empno, sal from emp01 where empno = 7369;


--6.? 사번(empno)과, 급여(sal)를 입력받아서 해당 직원의 희망급여를 변경하는 프로시저 
-- 프로시저명 : update_sal
select empno, sal from emp01 where empno = 7369;
create or replace procedure update_sal(v_empno emp01.empno%type, v_sal emp01.sal%type)
is
begin
	update emp01 set sal = v_sal where empno = v_empno;
end;
/
execute update_sal(7369,6000);
select empno, sal from emp01 where empno = 7369;

프로시저 특징
parameter
return 값은 있으나 키워드는 없다. 
키워드로 입력 데이터(parameter) or (in) / 반환 데이터(out)
--7. 이름으로 사번과 급여 검색 
	-- inout 모드
create or replace procedure info_empinfo(v_ename IN emp01.ename%type, v_empno OUT emp01.empno%type, v_sal OUT emp01.sal%type)
is
begin
	select empno, sal into v_empno, v_sal from emp01 where ename = v_ename;
end;
/
-- 바인딩 변수 선언하여 활용
-- 선언
-- procedure의 parameter로 반영, Out 기능의 변수는 값을 할당 받는다.
variable vempno number;
variable vsal number;

-- 어플리케이션(자바) 호출시에는 전용 API 사용
execute info_empinfo('SMITH', :vempno, :vsal);

print vempno;
print vsal;



--8. 이미 저장된 프로시저를 활용하는 새로운 프로시저
-- 이름 입력 후 사번과 급여 출력하는 로직

declare
	v_empno emp.empno%type;
	v_sal emp.sal%type;
begin
	info_empinfo('SMITH', v_empno, v_sal);
	dbms_output.put_line( v_empno || ' ' || v_sal);
end;
/



--9. ? 개인이 in out 모든 review 문제 만들고 답안 도출
-- 제약조건 : dept01 table 활용하기 













